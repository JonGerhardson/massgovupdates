# This workflow runs the sitemap crawler daily and commits the results.
name: Run Daily Sitemap Crawler

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 12 * * *' # Runs at 12:00 UTC every day

jobs:
  build-and-commit:
    runs-on: ubuntu-latest
    
    # Grant write permissions to the job to allow pushing commits.
    permissions:
      contents: write

    steps:
      # Step 1: Check out your repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install the required Python libraries
      # Assumes you have a requirements.txt file
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # You will need to add lxml to your requirements.txt
          # For now, we install it manually here.
          # If you have a requirements.txt, uncomment the next line
          pip install -r requirements.txt
          
          # Manually install dependencies if requirements.txt doesn't exist
          # Make sure to add 'lxml' here!
          # pip install requests lxml atproto
          
      # Step 4: Run the Python script to find updates
      - name: Run the sitemap crawler and Bluesky bot
        env:
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_APP_PASSWORD: ${{ secrets.BLUESKY_APP_PASSWORD }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python app.py

      # Step 5: Commit the new CSV file to your repository
      - name: Commit daily update file
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add daily_updates/*.csv
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            # Use YESTERDAY's date for the commit message
            YESTERDAY=$(date -d "yesterday" +%Y-%m-%d)
            git commit -m "Add daily updates for $YESTERDAY"
            git push
          fi

